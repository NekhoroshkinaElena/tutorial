{
  "themes": [
    {
      "theme": "Android",
      "image_url": "https://androidinsider.ru/wp-content/uploads/2020/03/android194125-750x422.jpeg"
    },
    {
      "theme": "ООП",
      "image_url": "https://avatars.mds.yandex.net/get-sprav-products/5373629/2a00000185a51c7dc6f63ed553b458d8cbbb/M_height"
    },
    {
      "theme": "Фрагменты",
      "image_url": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRTzU0K4USWG8jMLNt9qwlrHhKDNDfV6pr63xnH7bu3WA&s"
    },
    {
      "theme": "Activity",
      "image_url": "https://masterpiecer-images.s3.yandex.net/c9d6e2389e7011ee8fd8222e7fa838a6:upscaled"
    },
    {
      "theme": "Ресурсы",
      "image_url": "https://dev-mind.fr/img/training/android/firstapp/android-resource1-0e8b4389f8.png"
    },
    {
      "theme": "Git",
      "image_url": "https://whey.kz/wp-content/uploads/2020/11/placeholder.png"
    },
    {
      "theme": "SOLID",
      "image_url": "https://androidschool.ru/wp-content/uploads/2024/02/solid-logo.png"
    },
    {
      "theme": "Aссоциация, Композиция, Агрегация",
      "image_url": "https://teletype.in/files/04/b6/04b64f16-4e84-44bb-adaf-543e5797a292.jpeg"
    },
    {
      "theme": "Паттерны проектирования",
      "image_url": "https://i.stack.imgur.com/JBnVS.png"
    },
    {
      "theme": "Основы Java",
      "image_url": "https://ultravds.com/wp-content/uploads/2023/10/756533742439601.jpg",
      "items": [
        {
          "name": "Типы ссылок",
          "tutorial": "«Слабые» ссылки и «мягкие» ссылки (WeakReference, SoftReference) были добавлены в Java API давно. Ссылочные классы особенно важны в контексте сборки мусора . Сборщик мусора сам освобождает память занимаемую объектами, но не все программисты знают что решение об освобождении памяти он принимает исходя из типа имеющихся на объект ссылок.\nГлавное отличие SoftReference от WeakReference в том как сборщик с ними будет работать. Он может удалить объект в любой момент если на него указывают только weak ссылки, с другой стороны объекты с soft ссылкой будут собраны только когда JVM очень нужна память. Благодаря таким особенностям ссылочных классов каждый из них имеет свое применение.\n SoftReference можно использовать для реализации кэшей и когда JVM понадобится память она освободит ее за счет удаления таких объектов. А WeakReference отлично подойдут для хранения метаданных, например для хранения ссылки на ClassLoader.\nЕсли нет классов для загрузки то нет смысла хранить ссылку на ClassLoader, слабая ссылка делает ClassLoader доступным для удаления как только мы назначим ее вместо крепкой ссылки (Strong reference). В этой статье мы рассмотрим отличия типов ссылок в том числе Strong reference и Phantom reference (фантомная ссылка).\n\n          Strong ссылка самая простая, так как мы используем ее в программировании изо дня в день, например в коде вида String s = “abc” переменная s это и есть strong ссылка. Любой объект что имеет strong ссылку запрещен для удаления сборщиком мусора. Разумеется что это объекты которые нужны Java программе. Слабые ссылки представлены классом java.lang.ref.WeakReference, вы можете определить слабую ссылку так: \nCounter counter = new Counter(); // strong reference\nWeakReference weakCounter = new WeakReference(counter); //weak reference\ncounter = null; // now Counter object is eligible for garbage collection\nТеперь, как только вы присвоили strong ссылке counter значение null (counter = null), тот объект что создан в первой строке становится доступным для удаления сборщиком мусора, потому что он больше не имеет strong ссылки. Cозданная Weak ссылка weakCounter не может предотвратить удаление сборщиком объекта Counter. С другой стороны если бы это была Soft ссылка, объект типа Counter не был бы удален до тех пор пока JVM не нуждалась бы в памяти особенно сильно. Soft ссылки в Java представлены классом java.lang.ref.SoftReference. Пример создания SoftReference в Java \nCounter prime = new Counter();  // prime holds a strong reference\nSoftReference soft = new SoftReference(prime) ; //soft reference variable has SoftReference to Counter Object\nprime = null;  // now Counter object is eligible for garbage collection but only be collected when JVM absolutely needs memory\nПосле обнуления strong ссылки (в 3-ей строке) на объект Counter останется только 1 мягкая ссылка которая не сможет предотвратить удаление этого объекта сборщиком мусора, но в отличие от weak ссылки сможет отложить этот процесс до тех пор пока не появится острая нехватка памяти. Учитывая это отличие soft ссылки от weak, первая больше подходит для кэшей, а weak для метаданных. Хорошим примером служит класс WeakHashMap который является наследником интерфейса Map как и классы HashMap или TreeMap, но с одной отличительной особенностью. WeakHashMap оборачивает ключи как weak ссылки, что означает что как только не осталось strong ссылок на объект, weak ссылки которые расположены внутри WeakHashMap не спасут от сборщика мусора. Фантомные ссылки - третий тип ссылок, доступных в пакете java.lang.ref. Phantom ссылки представлены классом java.lang.ref.PhantomReference. Объект на который указывают только phantom ссылки может быть удален сборщиком в любой момент. Phantom ссылка создается точно так же как weak или soft. \nDigitalCounter digit = new DigitalCounter(); // digit reference variable has strong reference\nPhantomReference phantom = new PhantomReference(digit); // phantom reference\ndigit = null;\nКак только вы обнулите strong ссылки на объект DigitalCounter, сборщик мусора удалит его в любой момент, так как теперь на него ведут только phantom ссылки. Кроме классов WeakReference, SoftReference, PhantomReference, WeakHashMap, полезно знать о классе ReferenceQueue. Вы можете воспользоваться этим классом при создании объекта класса WeakReference, SoftReference или PhantomReference: \nReferenceQueue refQueue = new ReferenceQueue(); //reference will be stored in this queue for cleanup\nDigitalCounter digit = new DigitalCounter();\nPhantomReference phantom = new PhantomReference(digit, refQueue);\nСсылка на объект будет добавлена в ReferenceQueue и вы сможете контролировать состояние ссылок путем опроса ReferenceQueue. Жизненный цикл Object хорошо представлен на этой диаграмме:  Вот и все отличия между weak и soft ссылками в Java. Так же мы познакомились с phantom ссылками, классом WeakHashMap и ReferenceQueue. Правильное использование ссылок поможет при сборке мусора и в результате мы получим более гибкое управление памятью в Java.\n",
          "tests": [
            {
              "title": "Типы ссылок Java",
              "questions": [
                {
                  "question": "Назовите какие типы ссылок существуют в Java",
                  "answer": "Strong references \n Weak references \n Soft references \n Phantom Reference"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "theme": "Основы Kotlin",
      "image_url": "https://appmaster.io/api/_files/bLzbyrE3kokyk9p7QthYmA/download/",
      "items": [
        {
          "name": "Модификаторы доступа",
          "tutorial": "В Kotlin предусмотрено четыре модификатора доступа: private, protected, internal и public. Если явно не использовать никакого модификатора, то по умолчанию применяется public.",
          "tests": [
            {
              "title": "Модификаторы доступа",
              "questions": [
                {
                  "question": "Перечислите модификаторы доступа в Kotlin",
                  "answer": "В Kotlin предусмотрено четыре модификатора доступа: private, protected, internal и public. Если явно не использовать никакого модификатора, то по умолчанию применяется public."
                }
              ]
            }
          ]
        },
        {
          "name": "Основные отличия Java от Kotlin",
          "tutorial": "",
          "tests": [
            {
              "title": "",
              "questions": [
                {
                  "question": "",
                  "answer": ""
                }
              ]
            }
          ]
        },
        {
          "name": "Data classes",
          "tutorial": "\n\n\n\nКлассы данных в\nKotlin в основном используются для хранения данных. Для\nкаждого класса данных компилятор автоматически генерирует дополнительные\nфункции, которые позволяют выводить экземпляр в читаемый вывод, сравнивать\nэкземпляры, копировать экземпляры:\n\n\n\n\n\n-  equals()/\n.hashCode() пара.\n\n\n\n\n\n-  toString() формы\n\"User(name=John, age=42)\".\n\n\n\n\n\n-  componentN() функции ,\nсоответствующие свойствам в порядке их объявления.\n\n\n\n\n\n-  copy()функция \n\n\n\n\n\n \n\n\n\n\n\nData классы должны соответствовать следующим требованиям:\n\n\n\n\n\n1. Основной конструктор должен иметь хотя бы один параметр(конструкторов может\nбыть несколько)\n\n\n\n\n\n2. Все основные параметры конструктора должны быть помечены как val или var.\n\n\n\n\n\n3. Data classes can't be abstract, open, sealed, or inner.\n\n\n\n\n\n \n\n\n\n\n\nЕсли существуют\nявные реализации .equals(), .hashCode(), или .toString()в теле класса\nданных или final реализации в\nсуперклассе, то эти функции не генерируются, а используются существующие\nреализации.\n\n\n\n\n\n \n\n\n\n\n\nПредоставление\nявной реализации функций .componentN() и .copy() не допускается.\n\n\n\n\n\n \n\n\n\n\n\nЕсли супертип имеет\n.componentN() функции, которые являются open совместимыми типами и возвращают их, соответствующие функции генерируются\nдля класса данных и переопределяют функции супертипа. Если функции супертипа не\nмогут быть переопределены из-за несовместимости сигнатур или из-за их\nокончательности, сообщается об ошибке.\n\n\n\n\n\n \n\n\n\n\n\nКлассы данных\nмогут расширять другие классы.\n\n\n\n\n\nВ JVM, если сгенерированный класс должен иметь конструктор без параметров,\nнеобходимо указать значения по умолчанию для свойств (см. Конструкторы ):\n\n\n\n\n\ndata class User(val name: String = \"\", val age: Int = 0)\n\n\n\n\n\n \n\n\n\n\n\nСвойства,\nобъявленные в теле класса\n\n\n\n\n\nКомпилятор\nиспользует только свойства, определенные внутри основного конструктора, для\nавтоматически создаваемых функций. Чтобы исключить свойство из сгенерированных\nреализаций, объявите его внутри тела класса:\n\n\n\n\n\n \n\n\n\n\n\n  \n\ndata class Person(val name: String) {\n\n\n  \n\n    var age: Int = 0\n\n\n  \n\n}\n\n\n  \n\n\n\n\n \n\n\n\n\n\nВ приведенном\nниже примере внутри реализаций, и name по умолчанию\nиспользуется только свойство , и существует только одна компонентная функция —\n. Свойство объявляется внутри тела класса и исключается. Таким образом, два\nобъекта с одинаковыми , но разными значениями считаются равными, поскольку\nоценивают свойства только основного конструктора: .toString() .equals() .hashCode() .copy() .component1() agePersonnameage.equals()\n\n\n\n\n\n  \n\nval  person1  = \n  Человек ( «Джон» )\n\n\n  \n\nval  person2  = \n  Человек ( «Джон» )\n\n\n  \n\nчеловек1 .\n  возраст  =  10\n\n\n  \n\nчеловек2 .\n  возраст  =  20\n\n\n  \n\nprintln ( \"person1 == person2: ${person1 == person2}\" )\n\n\n  \n\n// человек1\n  == человек2: правда\n\n\n  \n\nprintln ( \"человек1 с возрастом ${person1.age}: ${person1}\" )\n\n\n  \n\n// человек1 в\n  возрасте 10 лет: Person(name=John)\n\n\n  \n\nprintln ( \"человек2 с возрастом ${person2.age}: ${person2}\" )\n\n\n  \n\n// человек2 в\n  возрасте 20 лет: Person(name=John)\n\n\n  \n\n \n\n\n  \n\n\n\n\n \n\n\n\n\n\nКопирование\n\n\n\n\n\nФункция copy() позволяет скопировать объект и изменить некоторые его свойства, оставив\nостальные неизменными.\n\n\n\n\n\nРеализация этой\nфункции для приведенного User выше класса\nбудет следующей:\n\n\n\n\n\n  \n\nfun copy(name: String = this.name, age: Int = this.age) = User(name, age)\n\n\n  \n\nЗатем вы\n  можете написать следующее:\n\n\n  \n\nval jack = User(name = \"Jack\", age = 1)\n\n\n  \n\nval olderJack = jack.copy(age = 2)\n\n\n  \n\n\n\n\n \n\n\n\n\n\nКлассы данных и\nобъявления деструктуризации\n\n\n\n\n\nФункции\nкомпонентов , созданные для классов данных, позволяют использовать их в\nобъявлениях деструктуризации:\n\n\n\n\n\n \n\n\n\n\n\n  \n\nval jane = User(\"Jane\", 35)\n\n\n  \n\nval (name, age) = jane\n\n\n  \n\nprintln(\"$name, $age years of age\")\n\n\n  \n\n// Jane, 35 years of age\n\n\n  \n\n\n\n\n \n\n\n\n\n\nСтандартные\nклассы данных\n\n\n\n\n\nСтандартная\nбиблиотека предоставляет классы Pair и Triple. Однако в большинстве случаев именованные классы данных являются лучшим\nвыбором при проектировании, поскольку они облегчают чтение кода, предоставляя\nзначимые имена свойствам.\n\n\n",
          "tests": [
            {
              "title": "",
              "questions": [
                {
                  "question": "",
                  "answer": ""
                }
              ]
            }
          ]
        },
        {
          "name": "Изолированные классы и интерфейсы",
          "tutorial": "Sealed классы и интерфейсы представляют собой ограниченные иерархии классов, которые обеспечивают больший контроль над наследованием. Все прямые подклассы запечатанного класса известны во время компиляции. Никакие другие подклассы не могут появляться за пределами модуля и пакета, внутри которых определен запечатанный класс. Например, сторонние клиенты не могут расширить ваш запечатанный класс в своем коде. Таким образом, каждый экземпляр запечатанного класса имеет тип из ограниченного набора, который известен при компиляции этого класса.\n\nТо же самое касается запечатанных интерфейсов и их реализаций: после компиляции модуля с запечатанным интерфейсом новые реализации появиться не могут.\n\nВ некотором смысле запечатанные классы похожи на enum классы: набор значений для перечислимого типа также ограничен, но каждая перечислимая константа существует только как единственный экземпляр , тогда как подкласс запечатанного класса может иметь несколько\nэкземпляров, с разными реализациями.\n\nВ качестве примера\nрассмотрим API библиотеки.\nВероятно, он будет содержать классы ошибок, позволяющие пользователям\nбиблиотеки обрабатывать ошибки, которые она может выдать. Если в иерархию таких\nклассов ошибок входят интерфейсы или абстрактные классы, видимые в публичном API, то ничто не мешает реализовать или расширить их в клиентском коде. Однако\nбиблиотека не знает об ошибках, объявленных за ее пределами, поэтому не может\nобрабатывать их согласованно со своими собственными классами. Благодаря\nзакрытой иерархии классов ошибок авторы библиотек могут быть уверены, что им\nизвестны все возможные типы ошибок и никакие другие не появятся позже.\n\nЧтобы объявить\nзапечатанный класс или интерфейс, поместите модификатор sealed перед его именем: \\nsealed class IOError(): Error\n\nclass FileReadError(val file: File): IOError()\n\nclass DatabaseError(val source: DataSource): IOError()\n\nobject RuntimeError : Error\n\nSealed класс сам по себе является абстрактным abstract , его экземпляр не может быть создан напрямую.\nКонструкторы запечатанных классов могут иметь одну из двух видимостей : protected(по умолчанию) или private:\n\nsealed class IOError {\n    constructor() { /*...*/ } //\n  protected by default\n  private constructor(description: String): this() { /*...*/ } // private is OK\n\n    // public constructor(code:\n  Int): this() {} // Error: public and internal are not allowed\n}\n\nLocation of direct subclasses\n\nПрямые\nподклассы запечатанных классов и интерфейсов должны быть объявлены в одном\nпакете. Они могут быть верхнего уровня или вложенными в любое количество других\nименованных классов, именованных интерфейсов или именованных объектов.\nПодклассы могут иметь любую видимость , если они совместимы с обычными\nправилами наследования в Kotlin.\n\n\nПодклассы\nзапечатанных классов должны иметь правильное квалифицированное имя. Они не могут быть локальными или анонимными объектами.\n\nEnum classes can't extend a sealed class (as well as any other class), but\nthey can implement sealed interfaces.\n\nЭти ограничения\nне применяются к косвенным подклассам. Если прямой подкласс запечатанного\nкласса не помечен как запечатанный, его можно расширить любым способом, который\nпозволяют его модификаторы:\n\nsealed interface Error // has implementations only in same package and\n  module\n\nsealed class IOError(): Error // extended only in same package and module\n\nopen class CustomError(): Error // can be extended wherever it's visible\n\nSealed classes and when expression\n\nThe key benefit of using sealed classes comes into play when you use them\nin a when expression. If it's possible to verify that the statement covers all\ncases, you don't need to add an else clause to the statement:\n\nfun log(e: Error) = when(e) {\n\n    is FileReadError -> {\nprintln(\"Error while reading file ${e.file}\") }\n\n    is DatabaseError -> {\nprintln(\"Error while reading from database ${e.source}\") }\n\n    is RuntimeError ->  { println(\"Runtime error\") }\n\n    // the `else` clause is not\nrequired because all the cases are covered}",
          "tests": [
            {
              "title": "",
              "questions": [
                {
                  "question": "",
                  "answer": ""
                }
              ]
            }
          ]
        },
        {
          "name": "Функции расширения",
          "tutorial": "",
          "tests": [
            {
              "title": "",
              "questions": [
                {
                  "question": "",
                  "answer": ""
                }
              ]
            }
          ]
        },
        {
          "name": "",
          "tutorial": "",
          "tests": [
            {
              "title": "",
              "questions": [
                {
                  "question": "",
                  "answer": ""
                }
              ]
            }
          ]
        },
        {
          "name": "",
          "tutorial": "",
          "tests": [
            {
              "title": "",
              "questions": [
                {
                  "question": "",
                  "answer": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
